version: '3.8'

services:
  # ----------------------------
  # Base de datos para Posts
  # ----------------------------
  sql-posts:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sql-posts
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Batraci0C0nPeluca"
    ports:
      - "14331:1433"
    volumes:
      - sql_posts_data:/var/opt/mssql
    networks:
      - proyecto-net

  # ----------------------------
  # Base de datos para Users
  # ----------------------------
  sql-users:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sql-users
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Batraci0C0nPeluca"
    ports:
      - "14332:1433"
    volumes:
      - sql_users_data:/var/opt/mssql
    networks:
      - proyecto-net

  # ----------------------------
  # Microservicio Posts
  # ----------------------------
  posts-ms:
    build:
      context: ../fireBreath-backend
      dockerfile: FireBreath.PostsMicroservice/Dockerfile
    container_name: posts-ms
    depends_on:
      - sql-posts
    environment:
      ConnectionStrings__DefaultConnection: >-
        Server=sql-posts,1433;
        Database=FireBreath_Posts;
        User Id=sa;
        Password=Batraci0C0nPeluca;
        TrustServerCertificate=true;
        MultipleActiveResultSets=true;
    ports:
      - "5001:80"
    volumes:
      - posts_files_data:/app/Files
    networks:
      - proyecto-net

  # ----------------------------
  # Microservicio Users
  # ----------------------------
  users-ms:
    build:
      context: ../fireBreath-backend
      dockerfile: FireBreath.UsersMicroservice/Dockerfile
    container_name: users-ms
    depends_on:
      - sql-users
    environment:
      ConnectionStrings__DefaultConnection: >-
        Server=sql-users,1433;
        Database=FireBreath_Users;
        User Id=sa;
        Password=Batraci0C0nPeluca;
        TrustServerCertificate=true;
        MultipleActiveResultSets=true;
    ports:
      - "5002:80"
    networks:
      - proyecto-net

  # ----------------------------
  # API Gateway (Ocelot)
  # ----------------------------
  api-gateway:
    build:
      context: ../fireBreath-backend
      dockerfile: FireBreath.ApiGateway/Dockerfile
    container_name: api-gateway
    depends_on:
      - posts-ms
      - users-ms
    ports:
      - "8000:80"
    networks:
      - proyecto-net

  # ----------------------------
  # Frontend React + Nginx
  # ----------------------------
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: react-frontend
    depends_on:
      - api-gateway
    ports:
      - "8080:80"
    networks:
      - proyecto-net
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

  # ----------------------------
  # Jenkins
  # ----------------------------
  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    container_name: jenkins
    ports:
      - "9090:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  sql_posts_data:
  sql_users_data:
  posts_files_data:
  jenkins_home:

networks:
  proyecto-net:
    driver: bridge